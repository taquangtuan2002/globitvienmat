import { observer } from "mobx-react";
import React, { useEffect } from "react";
import { useStore } from "../../stores";
import { Grid, Button } from "@material-ui/core";
import AddIcon from "@material-ui/icons/Add";
import { useTranslation } from "react-i18next";
import GlobitsConfirmationDialog from "../../common/GlobitsConfirmationDialog";
import UserList from "./UserList";
import UserFilters from "./UserFilters";
import UserCreateEditPopup from "./UserCreateEditPopup";
import GlobitsBreadcrumb from "../../common/GlobitsBreadcrumb";
import { useTheme } from "@material-ui/core/styles";
import useMediaQuery from "@material-ui/core/useMediaQuery";
import clsx from "clsx";

export default observer(function UserIndex() {
  const { userStore } = useStore();
  const { t } = useTranslation();

  const {
    userList,
    updatePageData,
    handleEditUser,
    shouldOpenEditorDialog,
    shouldOpenConfirmationDialog,
    handleClose,
    handleConfirmDelete,
  } = userStore;

  useEffect(() => {
    updatePageData();
  }, [updatePageData]);

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const isExtraSmall = useMediaQuery(theme.breakpoints.down("xs"));

  return (
    <div className="content-index">
      <div className="index-breadcrumb">
        <GlobitsBreadcrumb routeSegments={[{ name: t("navigation.manage.listUser") }]} />
      </div>
      <Grid className="index-card" container spacing={3}>
        <Grid item lg={6} md={6} sm={4} xs={3}>
          <Button
            className={clsx('mb-16', 'btn', 'btn-info' ,'d-inline-flex', {
              'mr-16': !isExtraSmall
            })}
            startIcon={<AddIcon />}
            variant="contained"
            onClick={() => {
              handleEditUser();
            }}
          >
            {!isMobile && t("general.button.add")}
          </Button>
        </Grid>
        <Grid item lg={6} md={6} sm={8} xs={9}>
          <UserFilters />
        </Grid>
        {shouldOpenEditorDialog && <UserCreateEditPopup />}

        {shouldOpenConfirmationDialog && (
          <GlobitsConfirmationDialog
            open={shouldOpenConfirmationDialog}
            onConfirmDialogClose={handleClose}
            onYesClick={handleConfirmDelete}
            title={t("confirm_dialog.delete.title")}
            text={t("confirm_dialog.delete.text")}
            agree={t("confirm_dialog.delete.agree")}
            cancel={t("confirm_dialog.delete.cancel")}
          />
        )}
        <Grid item xs={12}>
          <UserList />
        </Grid>
      </Grid>
    </div>
  );
});
