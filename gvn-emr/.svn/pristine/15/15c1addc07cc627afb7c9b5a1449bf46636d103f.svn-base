package com.globits.emr.service.impl;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import org.joda.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.globits.core.service.impl.GenericServiceImpl;
import com.globits.emr.domain.concept.Concept;
import com.globits.emr.domain.concept.ConceptAnswer;
import com.globits.emr.domain.concept.ConceptAttribute;
import com.globits.emr.domain.concept.ConceptAttributeType;
import com.globits.emr.domain.concept.ConceptDatatype;
import com.globits.emr.domain.concept.ConceptNumeric;
import com.globits.emr.domain.concept.ConceptType;
import com.globits.emr.dto.concept.ConceptAnswerDto;
import com.globits.emr.dto.concept.ConceptAttributeDto;
import com.globits.emr.dto.concept.ConceptAttributeTypeDto;
import com.globits.emr.dto.concept.ConceptDto;
import com.globits.emr.dto.concept.ConceptNumericsDto;
import com.globits.emr.dto.search.SearchDto;
import com.globits.emr.repository.ConceptAnswersRepository;
import com.globits.emr.repository.ConceptAttributeRepository;
import com.globits.emr.repository.ConceptAttributeTypeRepository;
import com.globits.emr.repository.ConceptDatatypeRepository;
import com.globits.emr.repository.ConceptNumericRepository;
import com.globits.emr.repository.ConceptRepository;
import com.globits.emr.repository.ConceptTypeRepository;
import com.globits.emr.service.ConceptService;
import com.globits.emr.utils.ConceptUtil;

@Service
@Transactional
public class ConceptServiceImpl extends GenericServiceImpl<Concept, UUID> implements ConceptService{
	@PersistenceContext
    EntityManager manager;
	@Autowired 
	ConceptRepository repos;
	@Autowired
	ConceptTypeRepository conceptTypeRepos;
	@Autowired
	ConceptNumericRepository conceptNumRepos;
	@Autowired
	ConceptAnswersRepository conceptAnsRepos;
	@Autowired
	ConceptDatatypeRepository conceptDataTypeRepos;
	@Autowired
	ConceptAttributeRepository conceptAttrRepos;
	@Autowired
	ConceptAttributeTypeRepository conceptAttrTypeRepos;

	@Override
	public ConceptDto saveOrUpdate(UUID id, ConceptDto dto) {
		if (dto != null && dto.getCode() != null && StringUtils.hasText(dto.getCode())) {
			Concept entity = null;
            if (dto.getId() != null) {
                if (dto.getId() != null && !dto.getId().equals(id)) {
                    return null;
                }
                Optional<Concept> ConceptOptional = repos.findById(id);
                if (ConceptOptional.isPresent()) {
                    entity = ConceptOptional.get();
                }
                if (entity != null)
                    entity.setModifyDate(LocalDateTime.now());
            }
            if (entity == null) {
                entity = new Concept();
                entity.setCreateDate(LocalDateTime.now());
                entity.setModifyDate(LocalDateTime.now());
            }
            entity.setCode(dto.getCode());
            entity.setName(dto.getName());
            entity.setDescription(dto.getDescription());
            if (dto.getConceptDataType() != null && dto.getConceptDataType().getId() != null) {
                Optional<ConceptDatatype> optionalConceptDataType = conceptDataTypeRepos.findById(dto.getConceptDataType().getId());
                if (optionalConceptDataType.isPresent()) {
                	ConceptDatatype cdt = optionalConceptDataType.get();
                	entity.setConceptDataType(cdt);
                }
            }
            if (dto.getConceptType() != null && dto.getConceptType().getId() != null) {
                Optional<ConceptType> optionalConceptType = conceptTypeRepos.findById(dto.getConceptType().getId());
                if (optionalConceptType.isPresent()) {
                	ConceptType ct = optionalConceptType.get();
                	entity.setConceptType(ct);
                }
            }
            if (dto.getParent() != null && dto.getParent().getId() != null) {
                Optional<Concept> optionalParent = repos.findById(dto.getParent().getId());
                if (optionalParent.isPresent()) {
                	Concept con = optionalParent.get();
                    entity.setParent(con);
                }
            }
            if(dto.getConceptDataType()!=null) {
            	//get conceptdatatype by id
            	Optional<ConceptDatatype> conceptDataOptional = conceptDataTypeRepos.findById(dto.getConceptDataType().getId());
            if (conceptDataOptional.get().getCode().equals(ConceptUtil.CONCEPT_DATATYPE_NUMERIC)) {
            	if(dto.getConceptNumericsDto()!=null) {
            		Iterator<ConceptNumericsDto> iters = dto.getConceptNumericsDto().iterator();
        			HashSet<ConceptNumeric> cns = new HashSet<ConceptNumeric>();
        			while (iters.hasNext()) {
        				ConceptNumericsDto childDto = iters.next();
        				ConceptNumeric child = null;
        				if (childDto.getId() != null) {
        					Optional<ConceptNumeric> optional = conceptNumRepos.findById(childDto.getId());
        					if (optional.isPresent()) {
            					child = optional.get();
                            }
        				}
        				if (child == null) {
        					child = new ConceptNumeric();
        					 entity.setCreateDate(LocalDateTime.now());
        		             entity.setModifyDate(LocalDateTime.now());
        				}
        				if(childDto.getHiAbsolute()!=null)
        					child.setHiAbsolute(childDto.getHiAbsolute());
        				if(childDto.getHiCritical()!=null)
        					child.setHiCritical(childDto.getHiCritical());
        				if(childDto.getHiNormal()!=null)
        					child.setHiNormal(childDto.getHiNormal());
        				if(childDto.getLowAbsolute()!=null)
        					child.setLowAbsolute(childDto.getLowAbsolute());
        				if(childDto.getLowCritical()!=null)
        					child.setLowCritical(childDto.getLowCritical());
        				if(childDto.getLowNormal()!=null)
        					child.setLowNormal(childDto.getLowNormal());
        				if(childDto.getDisplayPrecision()!=null)
        					child.setDisplayPrecision(childDto.getDisplayPrecision());
        				if(childDto.getUnits()!=null)
        					child.setUnits(childDto.getUnits());
        				if(entity!=null) {
        					child.setConcept(entity);
        				}
        				cns.add(child);
        			}
        			entity.setConceptNumerics(cns);
            	}
            }
            if (conceptDataOptional.get().getCode().equals(ConceptUtil.CONCEPT_DATATYPE_CODED)) {
            	if(dto.getConceptAnswersDto()!=null) {
            		Iterator<ConceptAnswerDto> iters = dto.getConceptAnswersDto().iterator();
        			HashSet<ConceptAnswer> cns = new HashSet<ConceptAnswer>();
        			while (iters.hasNext()) {
        				ConceptAnswerDto childDto = iters.next();
        				ConceptAnswer child = null;
        				if (childDto.getId() != null) {
        					Optional<ConceptAnswer> optional = conceptAnsRepos.findById(childDto.getId());
        					if (optional.isPresent()) {
            					child = optional.get();
                            }
        				}
        				if (child == null) {
        					child = new ConceptAnswer();
        					 entity.setCreateDate(LocalDateTime.now());
        		             entity.setModifyDate(LocalDateTime.now());
        				}
        				if(childDto.getViewIndex()!=null)
        					child.setViewIndex(childDto.getViewIndex());
        				if (childDto.getAnswerConcept() != null && childDto.getAnswerConcept().getId() != null) {
        	                Optional<Concept> optionalAnswerConcept = repos.findById(childDto.getAnswerConcept().getId());
        	                if (optionalAnswerConcept.isPresent()) {
        	                	Concept con = optionalAnswerConcept.get();
        	                	child.setAnswerConcept(con);
        	                }
        	            }
        				if(entity!=null) {
        					child.setConcept(entity);
        				}
        				cns.add(child);
        			}
        			entity.setConceptAnswers(cns);
            	}
            }
            ///
            if(dto.getConceptAttributesDto()!=null) {
        		Iterator<ConceptAttributeDto> iters = dto.getConceptAttributesDto().iterator();
    			HashSet<ConceptAttribute> cns = new HashSet<ConceptAttribute>();
    			while (iters.hasNext()) {
    				ConceptAttributeDto childDto = iters.next();
    				ConceptAttribute child = null;
    				if (childDto.getId() != null) {
    					Optional<ConceptAttribute> optional = conceptAttrRepos.findById(childDto.getId());
    					if (optional.isPresent()) {
        					child = optional.get();
                        }
    				}
    				if (child == null) {
    					child = new ConceptAttribute();
    					 entity.setCreateDate(LocalDateTime.now());
    		             entity.setModifyDate(LocalDateTime.now());
    				}
    				if(childDto.getValue()!=null)
    					child.setValue(childDto.getValue());
    				if (childDto.getConceptAttributeType() != null && childDto.getConceptAttributeType().getId() != null) {
    	                Optional<ConceptAttributeType> optionalConceptAttrType = conceptAttrTypeRepos.findById(childDto.getConceptAttributeType().getId());
    	                if (optionalConceptAttrType.isPresent()) {
    	                	ConceptAttributeType ct = optionalConceptAttrType.get();
    	                	child.setConceptAttributeType(ct);
    	                }
    	            }
    				
    				if(entity!=null) {
    					child.setConcept(entity);
    				}
    				cns.add(child);
    			}
    			entity.setAttributes(cns);
        	}
            
            }
            entity = repos.save(entity);
            return new ConceptDto(entity);
        }
        return null;
	}

	@Override
	public Boolean deleteById(UUID id) {
		if (id != null) {
            repos.deleteById(id);
            return true;
        }
        return false;
	}

	@Override
	public ConceptDto getConcept(UUID id) {
		Concept entity = null;
        Optional<Concept> ConceptOptional = repos.findById(id);
        if (ConceptOptional.isPresent()) {
            entity = ConceptOptional.get();
        }
        if (entity != null) {
            return new ConceptDto(entity);
        }
        return null;
	}

	@Override
	public Page<ConceptDto> searchByPage(SearchDto dto) {
		if (dto == null) {
            return null;
        }

        int pageIndex = dto.getPageIndex();
        int pageSize = dto.getPageSize();

        if (pageIndex > 0) {
            pageIndex--;
        } else {
            pageIndex = 0;
        }

        String whereClause = "";

        String orderBy = " ORDER BY entity.createDate DESC";

        String sqlCount = "select count(entity.id) from Concept as entity where (1=1)   ";
        String sql = "select new com.globits.emr.dto.concept.ConceptDto(entity) from Concept as entity where (1=1)  ";

        if (dto.getKeyword() != null && StringUtils.hasText(dto.getKeyword())) {
            whereClause += " AND ( entity.name LIKE :text OR entity.code LIKE :text )";
        }

        sql += whereClause + orderBy;
        sqlCount += whereClause;

        Query q = manager.createQuery(sql, ConceptDto.class);
        Query qCount = manager.createQuery(sqlCount);

        if (dto.getKeyword() != null && StringUtils.hasText(dto.getKeyword())) {
            q.setParameter("text", '%' + dto.getKeyword() + '%');
            qCount.setParameter("text", '%' + dto.getKeyword() + '%');
        }
        int startPosition = pageIndex * pageSize;
        q.setFirstResult(startPosition);
        q.setMaxResults(pageSize);
        List<ConceptDto> entities = q.getResultList();
        long count = (long) qCount.getSingleResult();

        Pageable pageable = PageRequest.of(pageIndex, pageSize);
        return new PageImpl<>(entities, pageable, count);
	}

	@Override
	public Boolean checkCode(UUID id, String code) {
		if (StringUtils.hasText(code)) {
            Long count = repos.checkCode(code, id);
            return count != 0L;
        }
        return null;
	}

}
