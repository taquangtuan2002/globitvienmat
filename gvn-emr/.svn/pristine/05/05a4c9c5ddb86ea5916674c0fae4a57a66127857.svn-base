import React, { useEffect, useState } from "react";
import {
  Dialog,
  IconButton,
  Typography,
  withStyles,
  Grid,
  DialogActions,
  Button,
  DialogContent,
} from "@material-ui/core";
import MuiDialogTitle from "@material-ui/core/DialogTitle";
import CloseIcon from "@material-ui/icons/Close";
import Draggable from "react-draggable";
import Paper from "@material-ui/core/Paper";
import { Formik, Form } from "formik";
import { useTranslation } from "react-i18next";
import GlobitsDateTimePicker from "app/common/form/GlobitsDateTimePicker";
import GlobitsTextField from "app/common/form/GlobitsTextField";
import GlobitsPagingAutocomplete from "app/common/form/GlobitsPagingAutocomplete";
import GlobitsCheckBox from "app/common/form/GlobitsCheckBox";
import * as Yup from "yup";
import moment from "moment";
import { useStore } from "app/stores";
import SelectDepartmentPopup from "./SelectDepartmentPopup";

function PaperComponent(props) {
  return (
    <div className="paper-container">
      <Draggable
        handle="#draggable-dialog-title"
        cancel={'[class*="MuiDialogContent-root"]'}
      >
        <Paper {...props} />
      </Draggable>
    </div>
  );
}

const styles = (theme) => ({
  root: {
    margin: 0,
    padding: theme.spacing(2),
  },
  closeButton: {
    position: "absolute",
    right: theme.spacing(1),
    top: theme.spacing(1),
    color: theme.palette.grey[500],
  },
});

const DialogTitle = withStyles(styles)((props) => {
  const { children, classes, onClose, ...other } = props;
  return (
    <MuiDialogTitle disableTypography className={classes.root} {...other}>
      <Typography variant="h6">{children}</Typography>
      {onClose ? (
        <IconButton
          aria-label="close"
          className={classes.closeButton}
          onClick={onClose}
        >
          <CloseIcon />
        </IconButton>
      ) : null}
    </MuiDialogTitle>
  );
});

export default function SearchPopup(props) {
  const { t } = useTranslation();
  const { open, handleClose, item, handleSubmit, editable } = props;
  const {departmentStore} = useStore();
  const [isOpenDepartment, setIsOpenDepartment] = useState(false);

  const {handleToggleDepartmentPopup,shouldOpenDepartmentPopup,updatePageData} = departmentStore;
  const initialItem = {
    employeeStatus: null,
    startDate: null,
    endDate: null,
    position: null,
    department: null,
    note: "",
    unpaidLeave: false,
  };

  const validationSchema = Yup.object({
    startDate: Yup.date()
      .transform(function transformDate(castValue, originalValue) {
        return originalValue ? new Date(originalValue) : castValue;
      })
      .required(t("validation.required"))
      .typeError("Ngày bắt đầu không đúng định dạng")
      .nullable(),

    endDate: Yup.date()
      .test(
        "is-greater",
        "Ngày kết thức phải lớn ngày bắt đầu",
        function (value) {
          const { startDate } = this.parent;
          if (startDate && value) {
            return moment(value).isAfter(moment(startDate), "date");
          }
          return true;
        }
      )
      .transform(function transformDate(castValue, originalValue) {
        return originalValue ? new Date(originalValue) : castValue;
      })
      .required(t("validation.required"))
      .typeError("Ngày kết thúc không đúng định dạng")
      .nullable(),

    employeeStatus: Yup.object().required(t("validation.required")).nullable(),
    position: Yup.object().required(t("validation.required")).nullable(),
    department: Yup.object().required(t("validation.required")).nullable(),
  });

  const [formValues, setFormValues] = useState(null);

  useEffect(() => {
    if (item) {
      setFormValues({ ...item });
    } else {
      setFormValues({ ...initialItem });
    }
  }, [item]);

  const handleClosePopup = (values) => {
    setIsOpenDepartment(false);

  };

  useEffect(() => {
    updatePageData();
  }, [updatePageData]);

  return (
    <Dialog
      className="dialog-container"
      open={open}
      PaperComponent={PaperComponent}
      fullWidth
      maxWidth="sm"
    >
      <DialogTitle
        className="dialog-header "
        style={{ cursor: "move", backgroundColor: "#01C0C8" }}
        id="draggable-dialog-title"
      >
        <span className="mb-20" style={{ color: "#ffffff" }}>
          {editable ? t("general.button.add") : t("general.button.edit")}{" "}
          {t("workingHistory.title")}
        </span>
      </DialogTitle>
      <Formik
        initialValues={formValues}
        onSubmit={(values) => handleSubmit(values)}
        validationSchema={validationSchema}
      >
        {({ isSubmitting,values }) => (
          <Form
            autoComplete="off"
            style={{ overflow: "auto", maxHeight: "90vh" }}
          >
            <DialogContent
              className="dialog-body"
              style={{ minWidth: "300px" }}
            >
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <GlobitsPagingAutocomplete
                    name="employeeStatus"
                    label={
                      <span>
                        {t("workingHistory.employeeStatus")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                  />
                </Grid>

                <Grid item xs={12}>
                  <GlobitsDateTimePicker
                    label={
                      <span>
                        {t("workingHistory.startDate")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="startDate"
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsDateTimePicker
                    label={
                      <span>
                        {t("workingHistory.endDate")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="endDate"
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsPagingAutocomplete
                    name="position"
                    label={
                      <span>
                        {t("workingHistory.position")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                  />
                </Grid>
                <Grid item xs={12}>
                  {/* <GlobitsPagingAutocomplete
                    label={
                      <span>
                        {t("workingHistory.department")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="department"
                    api={pagingAllDepartments}
                  /> */}
                  <div className="input-popup-container">
                  
                  <GlobitsTextField
                      label={<span>
                                {t("workingHistory.department")}
                                <span className="text-danger"> * </span>
                              </span>}
                      name="department"
                      disabled
                      value={values.department ? values.department.name : ""}
                    />
                    <Button
                      variant="contained"
                      className="btn-primary"
                      style={{
                        marginTop:"21.5px"
                      }}
                      onClick={() => setIsOpenDepartment(true)}
                    >
                      {t("general.button.select")}
                    </Button>
                    {isOpenDepartment && (<SelectDepartmentPopup
                      open={isOpenDepartment}
                      handleClosePopup={handleClosePopup}
                      setIsOpenDepartment={setIsOpenDepartment}
                    />)}
                    </div>
                </Grid>
                <Grid item xs={12}>
                  <GlobitsTextField
                    label={t("workingHistory.note")}
                    name="note"
                    multiline
                    rows={4}
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsCheckBox
                    label={t("workingHistory.unpaidLeave")}
                    name="unpaidLeave"
                  />
                </Grid>
              </Grid>
            </DialogContent>

            <DialogActions className="dialog-footer p-0">
              <div className="flex flex-space-between flex-middle">
                <Button
                  variant="contained"
                  className="mr-12 btn btn-secondary d-inline-flex"
                  color="secondary"
                  onClick={() => {
                    handleClose();
                  }}
                >
                  {t("general.button.close")}
                </Button>
                <Button
                  className="mr-0 btn btn-primary d-inline-flex"
                  variant="contained"
                  color="primary"
                  type="submit"
                  disabled={isSubmitting}
                >
                  {t("general.button.save")}
                </Button>
              </div>
            </DialogActions>
          </Form>
        )}
      </Formik>
    </Dialog>
  );
}
