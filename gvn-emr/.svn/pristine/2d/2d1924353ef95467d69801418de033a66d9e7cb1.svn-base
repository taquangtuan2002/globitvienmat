import { makeAutoObservable } from "mobx";

import {
  pagingUsers,
  getUser,
  saveUser,
  deleteUser,
  updateUser,
} from "./UserService";
import "react-toastify/dist/ReactToastify.css";
import { toast } from "react-toastify";
import i18n from "i18n";
toast.configure({
  autoClose: 2000,
  draggable: false,
  limit: 3,
});

export default class UserStore {
  userList = [];
  roles = [];
  selectedUser = null;
  totalElements = 0;
  totalPages = 0;
  page = 1;
  rowsPerPage = 10;
  keyword = "";
  loadingInitial = false;
  shouldOpenEditorDialog = false;
  shouldOpenConfirmationDialog = false;

  constructor() {
    makeAutoObservable(this);
  }

  setLoadingInitial = (state) => {
    this.loadingInitial = state;
  };

  updatePageData = (item) => {
    if (item != null) {
      this.page = 1;
      this.keyword = item.keyword;
      this.search();
    } else {
      this.search();
    }
  };

  search = async () => {
    this.loadingInitial = true;
    var searchObject = {};
    searchObject.keyword = this.keyword;
    searchObject.pageIndex = this.page;
    searchObject.pageSize = this.rowsPerPage;

    try {
      let data = await pagingUsers(searchObject);
      this.userList = data.data.content;
      this.totalElements = data.data.totalElements;
      this.totalPages = data.data.totalPages;

      this.setLoadingInitial(false);
    } catch (error) {
      console.log(error);
      this.setLoadingInitial(false);
    }
  };

  setPage = (page) => {
    this.page = page;
    this.updatePageData();
  };

  setRowsPerPage = (event) => {
    this.rowsPerPage = event.target.value;
    this.page = 1;
    this.updatePageData();
  };

  handleChangePage = (event, newPage) => {
    this.setPage(newPage);
  };

  handleEditUser = (id) => {
    this.getUser(id).then(() => {
      this.shouldOpenEditorDialog = true;
    });
  };

  handleClose = () => {
    this.shouldOpenEditorDialog = false;
    this.shouldOpenConfirmationDialog = false;
    this.updatePageData();
  };

  handleDelete = (id) => {
    this.getUser(id).then(() => {
      this.shouldOpenConfirmationDialog = true;
    });
  };

  handleConfirmDelete = () => {
    this.deleteUser(this.selectedUser.id);
  };

  getUser = async (id) => {
    if (id != null) {
      try {
        let data = await getUser(id);
        this.selectedUser = data.data;
      } catch (error) {
        console.log(error);
        toast.warning(i18n.t("toast.get_fail"));
      }
    } else {
      this.selectedUser = null;
    }
  };

  saveUser = async (user) => {
    try {
      await saveUser(user);
      toast.success(i18n.t("toast.add_success"));
      this.handleClose();
    } catch (error) {
      console.log(error);
      toast.warning(i18n.t("toast.get_fail"));
    }
  };

  updateUser = async (user) => {
    try {
      await updateUser(user);
      toast.success(i18n.t("toast.update_success"));
      this.handleClose();
    } catch (error) {
      console.log(error);
      toast.warning(i18n.t("toast.get_fail"));
    }
  };

  deleteUser = async (id) => {
    try {
      await deleteUser(id);
      toast.success(i18n.t("toast.delete_success"));
      this.handleClose();
    } catch (error) {
      console.log(error);
      toast.warning(i18n.t("toast.get_fail"));
    }
  };
}
