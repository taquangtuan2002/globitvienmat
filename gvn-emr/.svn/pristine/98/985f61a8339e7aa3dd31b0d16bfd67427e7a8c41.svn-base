package com.globits.emr.service.impl;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Optional;
import java.util.UUID;

import org.joda.time.LocalDateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.globits.emr.domain.EpisodeOfCare;
import com.globits.emr.domain.PersonAttributeType;
import com.globits.emr.dto.EpisodeOfCareDto;
import com.globits.emr.dto.PersonAttributeTypeDto;
import com.globits.emr.repository.EpisodeOfCareRepository;
import com.globits.emr.service.EpisodeOfCareService;

@Service
public class EpisodeOfCareServiceImpl implements EpisodeOfCareService {
	@Autowired
	EpisodeOfCareRepository episodeOfCareRepository;

	@Override
	public EpisodeOfCareDto save(EpisodeOfCareDto dto) {
		EpisodeOfCare entity = null;
		DateFormat dateFormat = null;
		dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		if (dto.getId() != null) {
			entity = episodeOfCareRepository.getOne(dto.getId());
		}
		if (entity == null) {
			entity = new EpisodeOfCare();
			entity.setCreateDate(LocalDateTime.now());
			entity.setModifyDate(LocalDateTime.now());
		}

		if (dto.getStartDatetime() != null) {
			try {

				entity.setStartDatetime(dateFormat.parse(dto.getStartDatetime()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		if (dto.getStopDatetime() != null) {
			try {

				entity.setStopDatetime(dateFormat.parse(dto.getStopDatetime()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		episodeOfCareRepository.save(entity);
		return new EpisodeOfCareDto(entity);
	}

	@Override
	public Boolean delete(UUID id) {
		if (id != null) {
			EpisodeOfCare entity;
			Optional<EpisodeOfCare> optional = episodeOfCareRepository.findById(id);
			if (optional.isPresent()) {
				entity = optional.get();
				episodeOfCareRepository.delete(entity);
				return true;
			}else {
				return false;
			}

		}
		return false;
	}

	@Override
	public EpisodeOfCareDto deletevoided(UUID id) {
		EpisodeOfCare entity=new EpisodeOfCare();
		if (id != null) {

			entity=episodeOfCareRepository.getOne(id);
			
		}
		entity.setVoided(false);
		episodeOfCareRepository.save(entity);
		  return new EpisodeOfCareDto(entity);
	}

	@Override
	public EpisodeOfCareDto getById(UUID id) {
		
		return new EpisodeOfCareDto(episodeOfCareRepository.getOne(id));
	}

}
