package com.globits.emr.service.impl;

import com.globits.core.dto.PersonDto;
import com.globits.core.utils.CommonUtils;
import com.globits.emr.domain.concept.ConceptDatatype;
import com.globits.emr.dto.concept.ConceptDatatypeDto;
import com.globits.emr.service.ConceptDatatypeService;
import com.globits.emr.service.SetupDataService;
import com.globits.security.domain.Role;
import com.globits.security.dto.RoleDto;
import com.globits.security.dto.UserDto;
import com.globits.security.service.RoleService;
import com.globits.security.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class SetupDataServiceImpl implements SetupDataService {

    @Autowired
    private RoleService roleService;

    @Autowired
    private UserService userService;

    @Autowired
    private ConceptDatatypeService conceptDatatypeService;

    @Override
    public void setupEmrData() {
        try {
            createRoles();
        } catch (XMLStreamException e) {
            e.printStackTrace();
        }
        //create user
        createAdminUser();

        //create concept datatype
        createConceptDataType();


    }

    private void createAdminUser() {
        UserDto userDto = userService.findByUsername(com.globits.core.Constants.USER_ADMIN_USERNAME);
        if (CommonUtils.isNotNull(userDto)) {
            return;
        }

        userDto = new UserDto();
        userDto.setUsername(com.globits.core.Constants.USER_ADMIN_USERNAME);
        userDto.setPassword("admin");
        userDto.setEmail("admin@globits.net");
        userDto.setActive(true);
        userDto.setDisplayName("Admin User");

        Role role = roleService.findByName(com.globits.core.Constants.ROLE_ADMIN);

        userDto.getRoles().addAll(Arrays.asList(new RoleDto(role)));

        PersonDto person = new PersonDto();
        person.setGender("M");
        person.setFirstName("Admin");
        person.setLastName("User");
        person.setDisplayName("Admin User");

        userDto.setPerson(person);

        try {
            userService.save(userDto);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    private void createRoleIfNotExist(String roleName) {

        if (CommonUtils.isEmpty(roleName)) {
            return;
        }

        Role role = roleService.findByName(roleName);

        if (CommonUtils.isNotNull(role)) {
            return;
        }

        if (role == null) {
            role = new Role();
            role.setName(roleName);
        }

        try {
            roleService.save(role);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void createRoles() throws XMLStreamException {

        List<String> roleNames = new ArrayList<>();

        XMLInputFactory inputFactory = XMLInputFactory.newInstance();
        InputStream in = getClass().getClassLoader().getResourceAsStream("sys-roles.xml");
        XMLStreamReader streamReader = inputFactory.createXMLStreamReader(in, "UTF-8");

        streamReader.nextTag();
        streamReader.nextTag();

        while (streamReader.hasNext()) {
            if (streamReader.isStartElement()) {
                switch (streamReader.getLocalName()) {
                    case "name": {
                        roleNames.add(streamReader.getElementText());
                        break;
                    }
                }
            }
            streamReader.next();
        }

        streamReader.close();

        for (String roleName : roleNames) {
            createRoleIfNotExist(roleName);
        }
    }

    private void createConceptDataType(){
        //Numeric
        ConceptDatatypeDto conceptData1 = new ConceptDatatypeDto();
        conceptData1.setName("Numeric");
        conceptData1.setCode("numeric");
        conceptData1.setDescription("Numeric");
        if(!conceptDatatypeService.checkCode(null, conceptData1.getCode())){
            conceptDatatypeService.saveOrUpdate(null, conceptData1);
        }

    }

}
