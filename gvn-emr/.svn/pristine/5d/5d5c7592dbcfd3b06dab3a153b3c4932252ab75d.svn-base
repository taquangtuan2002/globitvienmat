import React, { useEffect, useState } from "react";
import {
  Dialog,
  IconButton,
  Typography,
  withStyles,
  Grid,
  DialogActions,
  Button,
  DialogContent,
} from "@material-ui/core";
import MuiDialogTitle from "@material-ui/core/DialogTitle";
import CloseIcon from "@material-ui/icons/Close";
import Draggable from "react-draggable";
import Paper from "@material-ui/core/Paper";
import { Formik, Form } from "formik";
import { useTranslation } from "react-i18next";
import GlobitsDateTimePicker from "app/common/form/GlobitsDateTimePicker";
import GlobitsTextField from "app/common/form/GlobitsTextField";
import GlobitsPagingAutocomplete from "app/common/form/GlobitsPagingAutocomplete";
import { pagingCountry } from "app/views/Country/CountryService";
import * as Yup from "yup";
import moment from "moment";

function PaperComponent(props) {
  return (
    <div className="paper-container">
      <Draggable
        handle="#draggable-dialog-title"
        cancel={'[class*="MuiDialogContent-root"]'}
      >
        <Paper {...props} />
      </Draggable>
    </div>
  );
}

const styles = (theme) => ({
  root: {
    margin: 0,
    padding: theme.spacing(2),
  },
  closeButton: {
    position: "absolute",
    right: theme.spacing(1),
    top: theme.spacing(1),
    color: theme.palette.grey[500],
  },
});

const DialogTitle = withStyles(styles)((props) => {
  const { children, classes, onClose, ...other } = props;
  return (
    <MuiDialogTitle disableTypography className={classes.root} {...other}>
      <Typography variant="h6">{children}</Typography>
      {onClose ? (
        <IconButton
          aria-label="close"
          className={classes.closeButton}
          onClick={onClose}
        >
          <CloseIcon />
        </IconButton>
      ) : null}
    </MuiDialogTitle>
  );
});

export default function SearchPopup(props) {
  const { t } = useTranslation();
  const { open, handleClose, item, handleSubmit, editable } = props;

  const initialItem = {
    startDate: null,
    endDate: null,
    trainingPlace: "",
    trainingCountry: null,
    certificate: null,
    trainingContent: "",
  };

  const validationSchema = Yup.object({
    startDate: Yup.date()
      .transform(function transformDate(castValue, originalValue) {
        return originalValue ? new Date(originalValue) : castValue;
      })
      .required(t("validation.required"))
      .typeError("Ngày bắt đầu không đúng định dạng")
      .nullable(),

    endDate: Yup.date()
      .test(
        "is-greater",
        "Ngày kết thức phải lớn ngày bắt đầu",
        function (value) {
          const { startDate } = this.parent;
          if (startDate && value) {
            return moment(value).isAfter(moment(startDate), "date");
          }
          return true;
        }
      )
      .transform(function transformDate(castValue, originalValue) {
        return originalValue ? new Date(originalValue) : castValue;
      })
      .required(t("validation.required"))
      .typeError("Ngày kết thúc không đúng định dạng")
      .nullable(),

    trainingPlace: Yup.string().required(t("validation.required")).nullable(),
    trainingCountry: Yup.object().required(t("validation.required")).nullable(),
    certificate: Yup.object().required(t("validation.required")).nullable(),
  });

  const [formValues, setFormValues] = useState(null);

  useEffect(() => {
    if (item) {
      setFormValues({ ...item });
    } else {
      setFormValues({ ...initialItem });
    }
  }, [item]);

  return (
    <Dialog
      className="dialog-container"
      open={open}
      PaperComponent={PaperComponent}
      fullWidth
      maxWidth="sm"
    >
      <DialogTitle
        className="dialog-header "
        style={{ cursor: "move", backgroundColor: "#01C0C8" }}
        id="draggable-dialog-title"
      >
        <span className="mb-20" style={{ color: "#ffffff" }}>
          {editable ? t("general.button.add") : t("general.button.edit")}{" "}
          {t("trainingHistory.title")}
        </span>
      </DialogTitle>
      <Formik
        initialValues={formValues}
        onSubmit={(values) => handleSubmit(values)}
        validationSchema={validationSchema}
      >
        {({ isSubmitting }) => (
          <Form
            autoComplete="off"
            style={{ overflow: "auto", maxHeight: "90vh" }}
          >
            <DialogContent
              className="dialog-body"
              style={{ minWidth: "300px" }}
            >
              <Grid container spacing={2}>
                <Grid item xs={12}>
                  <GlobitsDateTimePicker
                    label={
                      <span>
                        {t("trainingHistory.startDate")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="startDate"
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsDateTimePicker
                    label={
                      <span>
                        {t("trainingHistory.endDate")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="endDate"
                  />
                </Grid>

                <Grid item xs={12}>
                  <GlobitsTextField
                    label={
                      <span>
                        {t("trainingHistory.trainingPlace")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="trainingPlace"
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsPagingAutocomplete
                    label={
                      <span>
                        {t("trainingHistory.trainingCountry")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="trainingCountry"
                    api={pagingCountry}
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsPagingAutocomplete
                    label={
                      <span>
                        {t("trainingHistory.certificate")}
                        <span className="text-danger"> * </span>
                      </span>
                    }
                    name="certificate"
                  />
                </Grid>
                <Grid item xs={12}>
                  <GlobitsTextField
                    label={t("trainingHistory.trainingContent")}
                    name="trainingContent"
                    multiline
                    rows={4}
                  />
                </Grid>
              </Grid>
            </DialogContent>

            <DialogActions className="dialog-footer p-0">
              <div className="flex flex-space-between flex-middle">
                <Button
                  variant="contained"
                  className="mr-12 btn btn-secondary d-inline-flex"
                  color="secondary"
                  onClick={() => {
                    handleClose();
                  }}
                >
                  {t("general.button.close")}
                </Button>
                <Button
                  className="mr-0 btn btn-primary d-inline-flex"
                  variant="contained"
                  color="primary"
                  type="submit"
                  disabled={isSubmitting}
                >
                  {t("general.button.save")}
                </Button>
              </div>
            </DialogActions>
          </Form>
        )}
      </Formik>
    </Dialog>
  );
}
